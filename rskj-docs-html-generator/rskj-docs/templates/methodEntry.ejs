<%
ordinalSuffixOf = function(i) {
    var j = i % 10,
        k = i % 100;
    if (j == 1 && k != 11) {
        return i + "st";
    }
    if (j == 2 && k != 12) {
        return i + "nd";
    }
    if (j == 3 && k != 13) {
        return i + "rd";
    }
    return i + "th";
}
%>

<template>
  <div class="Method-Wrapper">
    <div class="Method-Wrapper__header <%= (documentationDataset.methodType === 'WRITE') ? 'Method-Wrapper__header--write-method' : '' %>"
        @click="toggleExpand">
        <div
            class="Method-Wrapper__header__type <%= (documentationDataset.methodType === 'WRITE') ? 'Method-Wrapper__header__type--write-method' : '' %>">
            <%= documentationDataset.methodType %>
        </div>
        <div class="Method-Wrapper__header__title">
            <%= documentationDataset.method %>
        </div>
        <div class="Method-Wrapper__header__description">
            <%= documentationDataset.summary %>
        </div>
        <div class="Method-Wrapper__header__expand-button">
            <i class="fa fa-chevron-down fa-lg" v-if="!expanded"></i>
            <i class="fa fa-chevron-up fa-lg"  v-if="expanded"></i>
        </div>
    </div>
    <div class="Method-Wrapper__body <%= (documentationDataset.methodType === 'WRITE') ? 'Method-Wrapper__body--write-method' : '' %>"
        v-if="expanded">
        <div class="Method-Wrapper__body__request">
            <div class="Method-Wrapper__body__request__header">
                <div class="Method-Wrapper__body__request__header__title">Request</div>
                <button @click="switchRunMode" class="Button Button--try-button">
                    <template v-if="!runMode">
                        Try It Out
                    </template>
                    <template v-if="runMode">
                        Cancel
                    </template>
                </button>
            </div>

            <div class="Method-Wrapper__body__request__description">
                <%= documentationDataset.description %>
            </div>

            <% if(processedAdditionalData.inputParamsPresent) { %>
                <div class="Method-Wrapper__body__request__input-parameters">
                    <div class="Method-Wrapper__body__request__input-parameters__header">Input Parameters</div>
                    <div class="Method-Wrapper__body__request__input-parameters__position-wrapper">
                        <% documentationDataset.requestDetails.inputParams.forEach((inputPosition, index) => { %>
                            <div class="Method-Wrapper__body__request__input-parameters__position-wrapper__header"><%= ordinalSuffixOf((index + 1)) %> Parameter Options</div>
                            <% inputPosition.forEach((inputParameter) => { %>
                                <div class="Method-Wrapper__body__request__input-parameters__position-wrapper__body">
                                    <div class="Method-Wrapper__body__request__input-parameters__position-wrapper__body__header">
                                        <%= inputParameter.parameterName %>
                                    </div>
                                    <div class="Markdown-Override">
                                        <%- inputParameter.description %>
                                    </div>
                                    <% if(inputParameter.modelKey) { %>
                                        <div class="Method-Wrapper__body__request__input-parameters__position-wrapper__body__model">
                                            <a @click="navigateToModelRequest<%= inputParameter.modelKey %>" class="Method-Wrapper__body__response__response-results__model__link">
                                                Model: <%= inputParameter.modelKey %>
                                            </a>
                                        </div>
                                    <% } %>
                                </div>
                            <% }) %>
                        <% }) %>
                    </div>
                </div>
            <% } %>

            <div class="Method-Wrapper__body__request__request-body">
                <div class="Method-Wrapper__body__request__request-body__header">
                    <span v-if="!runMode">
                        Sample Request Body
                    </span>
                    <span v-if="runMode">
                        Try Out Request Body
                    </span>
                </div>
                <div class="Method-Wrapper__body__request__request-body__code">
                    <template v-if="!runMode">
                        <% documentationDataset.requestDetails.requestExamples.forEach(requestExample => { %>
                            <pre>
                                <!-- todo : generate for the variable in the js as well-->
                                <code class="hljs">
<%- requestExample %>
                                </code>
                            </pre>
                        <% }) %>
                    </template>
                    <template v-if="runMode">
                        <textarea class="Method-Wrapper__body__request__request-body__code__entry"
                        v-model="tryRequest" @change="clearValidationErrors" spellcheck="false"></textarea>
                    </template>
                </div>
            </div>

            <template v-if="runMode">
                <div class="Run-Button-List-Wrapper">
                    <button class="Button Button--reset-button" :disabled="requestPending" @click="resetTryRequest">
                        Reset
                    </button>
                    <button class="Button Button--run-button" :disabled="requestPending" @click="runCall">
                        <template v-if="requestPending">
                            <div class="spinner-border spinner-border-sm"></div>
                            Running Request
                        </template>
                        <template v-if="!requestPending">
                            Run Request
                        </template>
                    </button>
                </div>
                <template v-if="requestValidationFailed">
                    <div>
                        <div class="schema-error-description">
                            We sent your request to the server (but we detected the following issues when validating your request against the method schema).
                        </div>
                        <pre v-highlightjs="requestValidationErrors" class="schema-errors">
                            <code class="json"></code>
                        </pre>
                    </div>
                </template>
            </template>
        </div>

        <div class="Method-Wrapper__body__response">
            <div class="Method-Wrapper__body__response__header">
                <div class="Method-Wrapper__body__response__header__title">
                    Response
                </div>
            </div>

            <template v-if="!runMode">
                <div class="Method-Wrapper__body__response__response-results">
                    <div class="row">
                        <div class="col-2 Method-Wrapper__body__response__response-results__header">
                            Code
                        </div>
                        <div class="col-10 Method-Wrapper__body__response__response-results__header">
                            Response
                        </div>
                    </div>
                    <% documentationDataset.responseDetails.forEach((responseDetail) => { %>
                        <div class="row">
                            <div class="col-2">
                                <div class="Method-Wrapper__body__response__response-results__rpc-response">
                                    <%= responseDetail.code %>
                                </div>
                                <% if(responseDetail.httpCode) { %>
                                    <div class="Method-Wrapper__body__response__response-results__http-response">
                                        (HTTP <%= responseDetail.httpCode %>)
                                    </div>
                                <% } %>
                            </div>
                            <div class="col-10">
                                <div>
                                    <div class="Markdown-Override">
                                        <%- responseDetail.description %>
                                    </div>
                                    <% if(responseDetail.modelKey) { %>
                                        <div class="Method-Wrapper__body__response__response-results__model">
                                            <a @click="navigateToModelResponse<%= responseDetail.modelKey %>" class="Method-Wrapper__body__response__response-results__model__link">
                                                Model: <%= responseDetail.modelKey %>
                                            </a>
                                        </div>
                                    <% } %>
                                    <pre>
                                        <code class="hljs">
<%- responseDetail.responseExample %>
                                        </code>
                                    </pre>
                                </div>
                            </div>
                        </div>
                    <% }) %>
                </div>
            </template>

            <template v-if="runMode">
                <template v-if="responseResult">
                    <div class="Method-Wrapper__body__response__response-results">
                        <div class="row">
                            <div class="col-2">
                                Code
                            </div>
                            <div class="col-10">
                                Response
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-2">
                                <div class="Method-Wrapper__body__response__response-results__rpc-response">
                                    <template v-if="responseResult.ok">
                                        {{responseResult.statusText}}
                                    </template>
                                    <template v-if="!responseResult.ok">
                                      <template v-if="responseResult.errorCode">
                                          {{responseResult.errorCode}}
                                      </template>
                                    </template>
                                </div>
                                <div v-if="responseResult.status"
                                    class="Method-Wrapper__body__response__response-results__http-response">
                                    (HTTP {{responseResult.status}})
                                </div>
                            </div>
                            <div class="col-10">
                                <div>
                                    <pre v-highlightjs="sentResponseCode">
                                        <code class="json"></code>
                                    </pre>
                                </div>
                                <template v-if="responseValidationFailed">
                                  <div>
                                      <div class="schema-error-description">
                                          The successful response has the following validation errors in it.
                                      </div>
                                      <div class="schema-error-scroller">
                                        <pre v-highlightjs="responseValidationErrors" class="schema-errors">
                                            <code class="json"></code>
                                        </pre>
                                      </div>
                                  </div>
                              </template>
                            </div>
                        </div>
                      </div>
                    </template>
                    <template v-if="!responseResult">
                        <div class="Method-Wrapper__body__response__try-response">
                            <div v-if="!requestPending">
                                Click on "Run" to run the request.
                            </div>
                            <div v-if="requestPending">
                                <div class="spinner-border spinner-border-lg"></div>
                                <div>Running Request</div>
                            </div>
                        </div>
                    </template>
                </template>
            </div>
        </div>
  </div>
</template>

<script lang="ts">
    import { Component, Prop, Vue } from 'vue-property-decorator';
    import axios from 'axios';
    import { COMMON_JSON_RPC_VALUES, INDENT_LENGTH_JSON_STRINGIFY } from '../constants';
    import { validate } from 'jsonschema';
    import { EventBus } from '../event-bus';

    <% if(processedAdditionalData.hasRequestSchema) { %>
        import * as requestSchema from '../schema/request/<%= processedAdditionalData.className %>.json';
    <% } %>

    <% if(processedAdditionalData.hasResponseSchema) { %>
        import * as responseSchema from '../schema/response/<%= processedAdditionalData.className %>.json';
    <% } %>

    @Component
    export default class <%= processedAdditionalData.className %> extends Vue {
      private expanded: boolean = false;
      public runMode: boolean = false;
    
      public tryRequest: string = '';
      public ranOnce: boolean = false;
      public requestPending: boolean = false;
      public responseResult: any | null = null;
      public sentResponseCode: string | null = null;

      public requestValidationFailed = false;
      public requestValidationErrors: string | null = null;

      public responseValidationFailed = false;
      public responseValidationErrors: string | null = null;

      public methodType = '<%= documentationDataset.methodType %>';
      public methodName = '<%= documentationDataset.method %>';
    
      public requestExample = <%- JSON.stringify(processedAdditionalData.actualRequestExamples) %>;

      public toggleExpand(){
        this.expanded = !this.expanded;
      }
    
      switchRunMode() {
        this.runMode = !this.runMode;
    
        if (this.runMode && !this.ranOnce) {
          this.tryRequest = this.processJson(this.requestExample[0]);
        }
    
        this.ranOnce = true;
      }

      resetTryRequest() {
        this.tryRequest = this.processJson(this.requestExample[0]);
      }

      clearValidationErrors() {
        this.requestValidationFailed = false;
        this.requestValidationErrors = null;
        this.responseValidationFailed = false;
        this.responseValidationErrors = null;
      }
    
      runCall() {    
        <% if(processedAdditionalData.hasRequestSchema) { %>
            this.validateSchema((requestSchema as any).default, 'request', this.tryRequest);
        <% } %>

        const methodType: any = this.methodType;
    
        switch (methodType) {
          case 'WRITE':
            this.runWriteTransaction(this.tryRequest);
            break;
          case 'READ':
            this.runReadTransaction(this.tryRequest);
            break;
          default:
            alert('Unsupported type');
            break;
        }
      }

      public validateSchema(schema, prefix, value) {
          try {
            const json = (typeof value == 'string') ? JSON.parse(value) : value;
            const validationResult = validate(json, schema);
            const validationFailed = validationResult.errors.length > 0;
            const validationErrors = JSON.stringify(validationResult.errors, null, INDENT_LENGTH_JSON_STRINGIFY);

            if(prefix === 'request') {
              this.requestValidationFailed = validationFailed;
              this.requestValidationErrors = validationErrors;
            }
            else if(prefix === 'response') {
              this.responseValidationFailed = validationFailed;
              this.responseValidationErrors = validationErrors;
            }
          } catch(error) {
              const message = 'An error occurred when trying to validate the request format';
              const validationErrors = JSON.stringify([{ error: message }], null, INDENT_LENGTH_JSON_STRINGIFY);

              if(prefix === 'request') {
                this.requestValidationFailed = true;
                this.requestValidationErrors = validationErrors;
              } else if(prefix === 'response') {
                this.responseValidationFailed = true;
                this.responseValidationErrors = validationErrors;
              }
          }
      }

      <% documentationDataset.requestDetails.inputParams.forEach((inputPosition, index) => { %>
        <% inputPosition.forEach((inputParameter) => { %>
            <% if(inputParameter && inputParameter.modelKey) { %>
                navigateToModelRequest<%= inputParameter.modelKey %>() {
                    EventBus.$emit('Model-Expand', '<%= inputParameter.modelKey %>');
                    const navigateElement = document.getElementById('<%= inputParameter.modelKey %>');
                    navigateElement?.scrollIntoView({ behavior: "smooth" });
                }
            <% } %>
        <% }) %>
      <% }) %>

      <% documentationDataset.responseDetails.forEach((responseDetail) => { %>
        <% if(responseDetail.modelKey) { %>
            navigateToModelResponse<%= responseDetail.modelKey %>() {
                EventBus.$emit('Model-Expand', '<%= responseDetail.modelKey %>');
                const navigateElement = document.getElementById('<%= responseDetail.modelKey %>');
                navigateElement?.scrollIntoView({ behavior: "smooth" });
            }
        <% } %>
      <% }) %>

      processJson(json) {
        const parsed = JSON.parse(json);
        const processed = {
            ...COMMON_JSON_RPC_VALUES,
            method: this.methodName,
            ...parsed
        };
        return JSON.stringify(processed, null, INDENT_LENGTH_JSON_STRINGIFY);
      }
      
      private isJsonString(string) {
        try {
          JSON.parse(string);
          return true;
        }
        catch (e) {
          return false;
        }
      }

      runReadTransaction(requestBody) {
        this.responseResult = null;
        this.requestPending = true;
        
        const options = {
            headers: {'content-type': 'application/json'}
        };
        axios.post(Vue.prototype.$readHostUrl, requestBody, options)
          .then((response) => {
            const isError = !!response.data.error;
            this.requestPending = false;
            this.responseResult = {
                statusText: (isError) ? 'Error' : 'Success',
                status: response.status,
                errorCode: (isError) ? response.data.error.code : null,
                ok: !isError,
              };
            this.sentResponseCode = JSON.stringify(response.data, null, INDENT_LENGTH_JSON_STRINGIFY);

            <% if(processedAdditionalData.hasResponseSchema) { %>
              if(!isError) {
                this.validateSchema((responseSchema as any).default, 'response', response.data);
              }
            <% } %>
          })
          .catch(error => {
            this.requestPending = false;
            try {
              const parsedErrorBody = JSON.parse(error.request.response);
              this.responseResult = {
                errorCode: parsedErrorBody.error.code,
                ok: false,
              };
              this.sentResponseCode = JSON.stringify(parsedErrorBody.error, null, INDENT_LENGTH_JSON_STRINGIFY);
            }
            catch(e) {
              console.error('The following error occurred while parsing the json');
              console.log(e);

              this.responseResult = {
                errorCode: 'Unknown',
                ok: false,
              };
              this.sentResponseCode = '';
            }
          });
        }

        runWriteTransaction(request) {
          const web3Ethereum = Vue.prototype.$web3Result;
          if (web3Ethereum == null) {
            alert('There is no wallet connected, please connect your wallet');
            return;
          }

          this.responseResult = null;
          this.requestPending = true;

          try {
            const processedRequest = JSON.parse(request);

            web3Ethereum.request(processedRequest)
                .then(response => {
                    this.requestPending = false;

                    const isJson = this.isJsonString(response);
                    this.responseResult = {
                        ok: true,
                        statusText: 'Success'
                    };

                    this.sentResponseCode = response;
                })
                .catch(errorResponse => {
                    try {
                        this.requestPending = false;

                        // Convert to the type our frontend can read
                        this.responseResult = {
                            errorCode : (errorResponse && errorResponse.code)
                                ? errorResponse.code
                                : 'Unknown',
                            ok: false,
                        };
                        this.sentResponseCode = JSON.stringify(errorResponse, null, INDENT_LENGTH_JSON_STRINGIFY);
                    }
                    catch(e) {
                        this.processWriteUnknownError(e, 'An unknown error occurred locally on the browser while processing the error response');
                    }
                });
            }
            catch(e) {
                this.processWriteUnknownError(e, 'An unknown error occurred locally on the browser while processing the request');
            }
        }

        private processWriteUnknownError(e, errorString) {
            console.error(e);
                this.requestPending = false;
                this.responseResult = {
                    errorCode: 'Unknown',
                    ok: false,
                };
                this.sentResponseCode = errorString;
        }
    }
</script>
    
<!-- Add "scoped" attribute to limit CSS to this component only -->
<style scoped lang="scss">
    @import '../styles/details-entry.scss';
</style>



